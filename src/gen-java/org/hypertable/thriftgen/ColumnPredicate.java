/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.hypertable.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Specifies a column predicate
 *  *     ... WHERE column = "value"
 *  *   or
 *  *     ... WHERE column =^ "prefix"
 *  *
 *  * <dl>
 *  *   <dt>column_family</dt>
 *  *   <dd>The name of the column family</dd>
 *  *
 *  *   <dt>operation</dt>
 *  *   <dd>The predicate operation; either EXACT_MATCH or PREFIX_MATCH</dd>
 *  *
 *  *   <dt>value</dt>
 *  *   <dd>The cell value or cell prefix, depending on the operation</dd>
 *  *
 *  *   <dt>value_len</dt>
 *  *   <dd>The size of the value</dd>
 * *
 *  *   <dt>column_qualifier</dt>
 *  *   <dd>The column qualifier</dd>
 *  * </dl>
 */
public class ColumnPredicate implements org.apache.thrift.TBase<ColumnPredicate, ColumnPredicate._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnPredicate");

  private static final org.apache.thrift.protocol.TField COLUMN_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("column_family", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_QUALIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("column_qualifier", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ColumnPredicateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ColumnPredicateTupleSchemeFactory());
  }

  public String column_family; // optional
  /**
   * 
   * @see ColumnPredicateOperation
   */
  public ColumnPredicateOperation operation; // required
  public String value; // optional
  public String column_qualifier; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_FAMILY((short)1, "column_family"),
    /**
     * 
     * @see ColumnPredicateOperation
     */
    OPERATION((short)2, "operation"),
    VALUE((short)3, "value"),
    COLUMN_QUALIFIER((short)4, "column_qualifier");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_FAMILY
          return COLUMN_FAMILY;
        case 2: // OPERATION
          return OPERATION;
        case 3: // VALUE
          return VALUE;
        case 4: // COLUMN_QUALIFIER
          return COLUMN_QUALIFIER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.COLUMN_FAMILY,_Fields.VALUE,_Fields.COLUMN_QUALIFIER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("column_family", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ColumnPredicateOperation.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_QUALIFIER, new org.apache.thrift.meta_data.FieldMetaData("column_qualifier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnPredicate.class, metaDataMap);
  }

  public ColumnPredicate() {
  }

  public ColumnPredicate(
    ColumnPredicateOperation operation)
  {
    this();
    this.operation = operation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnPredicate(ColumnPredicate other) {
    if (other.isSetColumn_family()) {
      this.column_family = other.column_family;
    }
    if (other.isSetOperation()) {
      this.operation = other.operation;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetColumn_qualifier()) {
      this.column_qualifier = other.column_qualifier;
    }
  }

  public ColumnPredicate deepCopy() {
    return new ColumnPredicate(this);
  }

  @Override
  public void clear() {
    this.column_family = null;
    this.operation = null;
    this.value = null;
    this.column_qualifier = null;
  }

  public String getColumn_family() {
    return this.column_family;
  }

  public ColumnPredicate setColumn_family(String column_family) {
    this.column_family = column_family;
    return this;
  }

  public void unsetColumn_family() {
    this.column_family = null;
  }

  /** Returns true if field column_family is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_family() {
    return this.column_family != null;
  }

  public void setColumn_familyIsSet(boolean value) {
    if (!value) {
      this.column_family = null;
    }
  }

  /**
   * 
   * @see ColumnPredicateOperation
   */
  public ColumnPredicateOperation getOperation() {
    return this.operation;
  }

  /**
   * 
   * @see ColumnPredicateOperation
   */
  public ColumnPredicate setOperation(ColumnPredicateOperation operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public ColumnPredicate setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public String getColumn_qualifier() {
    return this.column_qualifier;
  }

  public ColumnPredicate setColumn_qualifier(String column_qualifier) {
    this.column_qualifier = column_qualifier;
    return this;
  }

  public void unsetColumn_qualifier() {
    this.column_qualifier = null;
  }

  /** Returns true if field column_qualifier is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_qualifier() {
    return this.column_qualifier != null;
  }

  public void setColumn_qualifierIsSet(boolean value) {
    if (!value) {
      this.column_qualifier = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMN_FAMILY:
      if (value == null) {
        unsetColumn_family();
      } else {
        setColumn_family((String)value);
      }
      break;

    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((ColumnPredicateOperation)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case COLUMN_QUALIFIER:
      if (value == null) {
        unsetColumn_qualifier();
      } else {
        setColumn_qualifier((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_FAMILY:
      return getColumn_family();

    case OPERATION:
      return getOperation();

    case VALUE:
      return getValue();

    case COLUMN_QUALIFIER:
      return getColumn_qualifier();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_FAMILY:
      return isSetColumn_family();
    case OPERATION:
      return isSetOperation();
    case VALUE:
      return isSetValue();
    case COLUMN_QUALIFIER:
      return isSetColumn_qualifier();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ColumnPredicate)
      return this.equals((ColumnPredicate)that);
    return false;
  }

  public boolean equals(ColumnPredicate that) {
    if (that == null)
      return false;

    boolean this_present_column_family = true && this.isSetColumn_family();
    boolean that_present_column_family = true && that.isSetColumn_family();
    if (this_present_column_family || that_present_column_family) {
      if (!(this_present_column_family && that_present_column_family))
        return false;
      if (!this.column_family.equals(that.column_family))
        return false;
    }

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_column_qualifier = true && this.isSetColumn_qualifier();
    boolean that_present_column_qualifier = true && that.isSetColumn_qualifier();
    if (this_present_column_qualifier || that_present_column_qualifier) {
      if (!(this_present_column_qualifier && that_present_column_qualifier))
        return false;
      if (!this.column_qualifier.equals(that.column_qualifier))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ColumnPredicate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ColumnPredicate typedOther = (ColumnPredicate)other;

    lastComparison = Boolean.valueOf(isSetColumn_family()).compareTo(typedOther.isSetColumn_family());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_family()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_family, typedOther.column_family);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperation()).compareTo(typedOther.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, typedOther.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_qualifier()).compareTo(typedOther.isSetColumn_qualifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_qualifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_qualifier, typedOther.column_qualifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ColumnPredicate(");
    boolean first = true;

    if (isSetColumn_family()) {
      sb.append("column_family:");
      if (this.column_family == null) {
        sb.append("null");
      } else {
        sb.append(this.column_family);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("operation:");
    if (this.operation == null) {
      sb.append("null");
    } else {
      sb.append(this.operation);
    }
    first = false;
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetColumn_qualifier()) {
      if (!first) sb.append(", ");
      sb.append("column_qualifier:");
      if (this.column_qualifier == null) {
        sb.append("null");
      } else {
        sb.append(this.column_qualifier);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ColumnPredicateStandardSchemeFactory implements SchemeFactory {
    public ColumnPredicateStandardScheme getScheme() {
      return new ColumnPredicateStandardScheme();
    }
  }

  private static class ColumnPredicateStandardScheme extends StandardScheme<ColumnPredicate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnPredicate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_FAMILY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_family = iprot.readString();
              struct.setColumn_familyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operation = ColumnPredicateOperation.findByValue(iprot.readI32());
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_QUALIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_qualifier = iprot.readString();
              struct.setColumn_qualifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnPredicate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.column_family != null) {
        if (struct.isSetColumn_family()) {
          oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
          oprot.writeString(struct.column_family);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operation != null) {
        oprot.writeFieldBegin(OPERATION_FIELD_DESC);
        oprot.writeI32(struct.operation.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_qualifier != null) {
        if (struct.isSetColumn_qualifier()) {
          oprot.writeFieldBegin(COLUMN_QUALIFIER_FIELD_DESC);
          oprot.writeString(struct.column_qualifier);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ColumnPredicateTupleSchemeFactory implements SchemeFactory {
    public ColumnPredicateTupleScheme getScheme() {
      return new ColumnPredicateTupleScheme();
    }
  }

  private static class ColumnPredicateTupleScheme extends TupleScheme<ColumnPredicate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ColumnPredicate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetColumn_family()) {
        optionals.set(0);
      }
      if (struct.isSetOperation()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetColumn_qualifier()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetColumn_family()) {
        oprot.writeString(struct.column_family);
      }
      if (struct.isSetOperation()) {
        oprot.writeI32(struct.operation.getValue());
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetColumn_qualifier()) {
        oprot.writeString(struct.column_qualifier);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ColumnPredicate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.column_family = iprot.readString();
        struct.setColumn_familyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operation = ColumnPredicateOperation.findByValue(iprot.readI32());
        struct.setOperationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.column_qualifier = iprot.readString();
        struct.setColumn_qualifierIsSet(true);
      }
    }
  }

}

